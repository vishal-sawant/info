package udbtests;

import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import base.LaunchBrowser;
import pageobjects.HomePage;
import pageobjects.LoginPage;
import pageobjects.MergerAcquisitionHome;

public class MergerAcquisitionHomeTest extends LaunchBrowser {
	private LoginPage loginPage;
	private HomePage homePage;
	private MergerAcquisitionHome mergerAcquisitionHome;

	@Test(priority = 1)
	public void verifyMAHomePgDisplayed() {
		loginPage = new LoginPage(driver);
		homePage = loginPage.clickLoginBtn(logger);
		mergerAcquisitionHome = homePage.clickOnMergerAcquisitionLink();
		Assert.assertTrue(
				mergerAcquisitionHome.getCompHPageText().contains("Target"),
				"M&A home page not displayed");
		logger.info("Test case passed: verify clicking on the M&A tab Merger Acquisition home page gets displayed");
		Reporter.log("Test case passed: verify clicking on the M&A tab Merger Acquisition home page gets displayed");
	}

	@Test(priority = 2)
	public void verifyAllColumnsDisplayedOnMAHp() {
		Assert.assertTrue(
				mergerAcquisitionHome.verifyDifferentColumnsOnMAHome(),
				"Not all columns are displayed M&A home page");
		logger.info("Test case passed: verify all the M&A columns are displayed on M&A home page");
		Reporter.log("Test case passed: verify all the M&A columns are displayed on M&A home page");
	}

	@Test(priority = 3)
	public void verifyDefaultSelectedValueOfShowEntiresDropdown() {
		Assert.assertEquals(
				mergerAcquisitionHome.getdefaultSelectedShowEntriesOption(),
				"10",
				"By default, 10 is not selected in 'Show entries' dropdown");
		logger.info("Test case passed: verify by default, 10 is selected in 'Show entries' dropdown");
		Reporter.log("Test case passed: verify by default, 10 is selected in 'Show entries' dropdown");
	}

	@Test(priority = 4)
	public void verifyDefaultNumberOfRecordsDispOnHome() {
		Assert.assertEquals(
				mergerAcquisitionHome.getNumberOfRecordsDisplayedOnMAHome(),
				10, "Not 10 records are displayed per page");
		logger.info("Test case passed: verify if 10 is selected in Show Entries, only 10 records are displayed per page");
		Reporter.log("Test case passed: verify if 10 is selected in Show Entries, only 10 records are displayed per page");
	}

	@Test(priority = 5)
	public void verifyRecordsDisplayedAsPerSelValInDropdown() {
		Assert.assertTrue(mergerAcquisitionHome
				.adjustNumberOfRecordsToBeDisplayedOnmAHome(),
				"Incorrect number of records displayed on M&A home page");
		logger.info("Test case passed: verify correct number of records display on M&A home page as per value selected in the show entries drop down");
		Reporter.log("Test case passed: verify correct number of records display on M&A home page as per value selected in the show entries drop down");
	}

	@DataProvider
	public Object[][] pageNavDataProvider() {
		return new Object[][] { { "10" }, { "25" }, { "50" }, { "100" } };
	}

	@Test(priority = 6, dataProvider = "pageNavDataProvider")
	public void verifyCompHomePageNavigation(String recordsToDisplay) {
		Assert.assertTrue(
				mergerAcquisitionHome.pageNavigation(recordsToDisplay),
				"M&A home page navigation does not work");
		logger.info("Test case passed: verify pagination works fine on M&A home page");
		Reporter.log("Test case passed: verify pagination works fine on M&A home page");
	}

	@Test(priority = 7)
	public void verifyDiffPageNavLinkWorks() {
		Assert.assertTrue(mergerAcquisitionHome.clickOnDiffPageNavLinks(),
				"Different page navigation links do not work");
		logger.info("Test case passed: verify page navigation links like First, Previous, Next and Last work properly");
		Reporter.log("Test case passed: verify page navigation links like First, Previous, Next and Last work properly");
	}

	@DataProvider
	public Object[][] searchOptionDataProvider() {
		return new Object[][] { { "byM&AId" }, { "byTarget" },
				{ "byAcquirer" }, { "bySeller" }, { "byFrom-ToDate" },
				{ "byValue" }, { "byStatus" }, { "byLastUpdatedUser" },
				{ "byLastUpdatedDate" }, { "byPublished-Unpublished" },
				{ "byUpdatesPublished" } };
	}

	@Test(priority = 8, dataProvider = "searchOptionDataProvider")
	public void verifySearchOnCompHp(String searchByType) {
		Assert.assertTrue(
				mergerAcquisitionHome.diffSearchOnMAHome(searchByType),
				"Search functionality does not work on M&A home page");
		logger.info("Test case passed: verify user able to search records by M&A Id, Target, Acquirer, Seller,  From-To Date, Value, Published");
		Reporter.log("Test case passed: verify user able to search records by M&A Id, Target, Acquirer, Seller,  From-To Date, Value, Published");
	}
	
	@Test (priority=9)
	public void verifyDefaultFilterWorksOnCompHp(){
		Assert.assertTrue(mergerAcquisitionHome.filterRecordsByUpdatedDate(),"By default records are not filtered by Last Updated Date on M&A Home page");
		logger.info("Test case passed: verify by default records are filtered by Last Updated Date in descending order on M&A Home page");
		Reporter.log("Test case passed: verify by default records are filtered by Last Updated Date in descending order on M&A Home page");
	}
	
	@DataProvider
    public Object[][] filterOptionDataProvider() {
        return new Object[][]{{"filterOnM&AId"}, {"filterOnAnnouncementDate"}, {"filterOnValue"}, {"filterOnStatus"}, {"filterOnLastUpdatedUser"}};
    }
	
	@Test (priority=10, dataProvider="filterOptionDataProvider")
	public void verifyFilterFunctionality(String filterByOption){
		Assert.assertTrue(mergerAcquisitionHome.filterByFunctionality(filterByOption),"Records filter functionality does not work on M&A home page");
		logger.info("Test case passed: verify user able to filter records by M&A ID, Announcement Date, Value, Status and Updated User");
		Reporter.log("Test case passed: verify user able to filter records by M&A ID, Announcement Date, Value, Status and Updated User");
	}
	
	
	
}
