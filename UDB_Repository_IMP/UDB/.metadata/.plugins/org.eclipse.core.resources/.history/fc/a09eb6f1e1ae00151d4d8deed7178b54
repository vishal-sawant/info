package udbtests;

import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import base.LaunchBrowser;
import pageobjects.AdminUser;
import pageobjects.HomePage;
import pageobjects.LoginPage;

public class AdminUserTest extends LaunchBrowser {
	private LoginPage loginPage;
	private HomePage homePage;
	private AdminUser adminuser;

	@Test(priority = 1)
	public void verifyUserAdminPgDisp() {
		loginPage = new LoginPage(driver);
		homePage = loginPage.clickLoginBtn(logger);
		adminuser = homePage.clickOnAdminUserLink();
		Assert.assertTrue(adminuser.adminUserPgDisplayed(),
				"Admin User page not displayed");
		logger.info("Test case passed: verify by clicking on 'Admin User' button, it redirects to Admin User page");
		Reporter.log("Test case passed: verify by clicking on 'Admin User' button, it redirects to Admin User page");
	}
	
	//@Test (priority=2)
	public void verifyDiffColsOnAdminUserPg() {
		Assert.assertTrue(adminuser.verifyDiffColsOnUserHmPg(),
				"Not all columns are displayed on Admin User home page");
		logger.info("Test case passed: verify all the columns are displayed on User Admin home page");
		Reporter.log("Test case passed: verify all the columns are displayed on User Admin home page");
	}
	
	//@Test (priority=3)
	public void verifyShowEntriesDropdownvalues() {
		Assert.assertTrue(adminuser.getDropDownEntries(),
				"Show Entries drop down values does not match");
		logger.info("Test case passed: verify user able to see values 10, 25, 50, 100 in 'Show entries' dropdown");
		Reporter.log("Test case passed: verify user able to see values 10, 25, 50, 100 in 'Show entries' dropdown");
	}
	
	//@Test (priority=4)
	public void verifyDefaultSelectedValueOfShowEntiresDropdown(){
		Assert.assertEquals(adminuser.getdefaultSelectedShowEntriesOption(), "10", "By default, 10 is not selected in 'Show entries' dropdown");
		logger.info("Test case passed: verify by default, 10 is selected in 'Show entries' dropdown");
		Reporter.log("Test case passed: verify by default, 10 is selected in 'Show entries' dropdown");
	}
	
	//@Test (priority=5)
	public void verifyDefaultNumberOfRecordsDispOnAdminUserHp(){
		Assert.assertEquals(adminuser.getNumberOfRecordsDisplayedOnAdminUserHp(), 10, "Not 10 records are displayed per page");
		logger.info("Test case passed: verify if 10 is selected in Show Entries, only 10 records are displayed per page");
		Reporter.log("Test case passed: verify if 10 is selected in Show Entries, only 10 records are displayed per page");
	}
	
	//@Test (priority=6)
	public void verifyRecordsDisplayedAsPerSelValInDropdown(){
		Assert.assertTrue(adminuser.adjustNumberOfRecordsToBeDisplayedOnUserHp(),"Incorrect number of records displayed on Admin User home page");
		logger.info("Test case passed: verify correct number of records display on Admin User home page as per value selected in the show entries drop down");
		Reporter.log("Test case passed: verify correct number of records display on Admin User home page as per value selected in the show entries drop down");
	}
	
	@DataProvider
    public Object[][] pageNavDataProvider() {
        return new Object[][]{{"10"}, {"25"}, {"50"}, {"100"}};
    }
	
	//@Test (priority=7,  dataProvider="pageNavDataProvider")
	public void verifyAdminUserPgNav(String recordsToDisplay){
		Assert.assertTrue(adminuser.pageNavigation(recordsToDisplay),"Admin User home page navigation does not work");	
		logger.info("Test case passed: verify Admin User home page navigation works fine");
		Reporter.log("Test case passed: verify Admin User home page navigation works fine");
	}
	
	//@Test (priority=8)
	public void verifyDiffPageNavLinkWorks(){
		Assert.assertTrue(adminuser.clickOnDiffPageNavLinks(),"Different page navigation links do not work");
		logger.info("Test case passed: verify page navigation links like First, Previous, Next and Last links work properly");
		Reporter.log("Test case passed: verify page navigation links like First, Previous, Next and Last links work properly");
	}
	
	@DataProvider
    public Object[][] searchOptionDataProvider() {
        return new Object[][]{{"byUserId"}, {"byFirstName"}, {"byLastName"}, {"byEmail"}, {"byCompany"}, {"byLast-LoginDate"}, {"byCreatedDate"}, {"byPublished-Unpublished"}};
    }
	
	//@Test (priority=9, dataProvider="searchOptionDataProvider")
	public void verifySearchOnAdminUserHp(String searchByType){
		Assert.assertTrue(adminuser.diffSearchOnUserHp(searchByType),"Search functionality does not work on Admin User home page");
		logger.info("Test case passed: verify user able to search records by User Id, First Name, Last Name, Email, From-To Date on Admin User home page");
		Reporter.log("Test case passed: verify user able to search records by User Id, First Name, Last Name, Email, From-To Date on Admin User home page");
	}
	
	//@Test (priority=10)
	public void verifyDefaultFilterWorksOnPersonHp(){
		Assert.assertTrue(adminuser.defaultSortOnUserIdCol(),"By default records are not filtered by latest User Id showing on the top");
		logger.info("Test case passed: verify by default records are sorted on User Id in ascending order");
		Reporter.log("Test case passed: verify by default records are sorted on User Id in ascending order");
	}
	
	@DataProvider
    public Object[][] filterOptionDataProvider() {
        return new Object[][]{{"filterOnUserId"}, {"filterOnFirstName"}, {"filterOnLastName"}, {"filterOnEmail"}, {"filterOnCompany"}, {"filterOnLastLoginDate"}, {"filterOnCreatedDate"}};
    }
	
	//@Test (priority=11, dataProvider="filterOptionDataProvider")
	public void verifyFilterFunctionality(String filterByOption){
		Assert.assertTrue(adminuser.filterByFunctionality(filterByOption),"Records filter functionality does not work on Admin User home page");
		logger.info("Test case passed: verify user able to filter Admin User records by User ID, User Name, Email, Company, Last Login Date, Created Date etc");
		Reporter.log("Test case passed: verify user able to filter Admin User records by User ID, User Name, Email, Company, Last Login Date, Created Date etc");
	}
	
	@Test (priority=12)
	public void verifyEditUserPgDisp(){
		Assert.assertTrue(adminuser.editAdminUser(),"Admin Edit User page does not display or not all fields displayed on Edit User page");
		logger.info("Test case passed: verify Admin Edit User page displayed and all the fields displayed on Edit User page");
		Reporter.log("Test case passed: verify Admin Edit User page displayed and all the fields displayed on Edit User page");
	}
	
	@Test (priority=13)
	public void verifyReadOnlyFields(){
		Assert.assertTrue(adminuser.readOnlyFields(),"User Name, First Name, Last Name, Email fields are not read only");
		logger.info("Test case passed: verify Admin Edit User page displayed and all the fields displayed on Edit User page");
		Reporter.log("Test case passed: verify Admin Edit User page displayed and all the fields displayed on Edit User page");
	}
}
